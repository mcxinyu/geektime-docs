site_name: 设计模式之美

theme:
  name: material

  palette:
    # Palette toggle for light mode
    - media: "(prefers-color-scheme: light)"
      scheme: default
      toggle:
        icon: material/brightness-4
        name: Switch to dark mode

    # Palette toggle for dark mode
    - media: "(prefers-color-scheme: dark)"
      scheme: slate
      toggle:
        icon: material/brightness-7
        name: Switch to light mode

  features:
    - navigation.footer
    - content.action.edit
    - navigation.sections
    - content.code.copy

  icon:
    edit: material/pencil
    logo: material/console-line

extra_css:
  - static/css/extra.css

extra:
  homepage:
  version:
    provider: mike

copyright: Copyright &copy; 2024-Present zkep
repo_url: https://github.com/zkep/mygeektime

markdown_extensions:
  - attr_list
  - md_in_html
  - pymdownx.highlight:
      anchor_linenums: true
  - pymdownx.inlinehilite
  - pymdownx.snippets
  - pymdownx.superfences

nav:
   - 开篇词_一对一的设计与编码集训，让你告别没有成长的烂代码！.md
  
   - 01_为什么说每个程序员都要尽早地学习并掌握设计模式相关知识_.md
  
   - 02_从哪些维度评判代码质量的好坏_如何具备写出高质量代码的能力_.md
  
   - 03_面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系_.md
  
   - 04_理论一_当谈论面向对象的时候，我们到底在谈论什么_.md
  
   - 05_理论二_封装、抽象、继承、多态分别可以解决哪些编程问题_.md
  
   - 06_理论三_面向对象相比面向过程有哪些优势_面向过程真的过时了吗_.md
  
   - 07_理论四_哪些代码设计看似是面向对象，实际是面向过程的_.md
  
   - 08_理论五_接口vs抽象类的区别_如何用普通的类模拟抽象类和接口_.md
  
   - 09_理论六_为什么基于接口而非实现编程_有必要为每个类都定义接口吗_.md
  
   - 10_理论七_为何说要多用组合少用继承_如何决定该用组合还是继承_.md
  
   - 11_实战一（上）_业务开发常用的基于贫血模型的MVC架构违背OOP吗_.md
  
   - 12_实战一（下）_如何利用基于充血模型的DDD开发一个虚拟钱包系统_.md
  
   - 13_实战二（上）_如何对接口鉴权这样一个功能开发做面向对象分析_.md
  
   - 14_实战二（下）_如何利用面向对象设计和编程开发接口鉴权功能_.md
  
   - 15_理论一_对于单一职责原则，如何判定某个类的职责是否够“单一”_.md
  
   - 16_理论二_如何做到“对扩展开放、修改关闭”_扩展和修改各指什么_.md
  
   - 17_理论三_里式替换（LSP）跟多态有何区别_哪些代码违背了LSP_.md
  
   - 18_理论四_接口隔离原则有哪三种应用_原则中的“接口”该如何理解_.md
  
   - 19_理论五_控制反转、依赖反转、依赖注入，这三者有何区别和联系_.md
  
   - 20_理论六_我为何说KISS、YAGNI原则看似简单，却经常被用错_.md
  
   - 21_理论七_重复的代码就一定违背DRY吗_如何提高代码的复用性_.md
  
   - 22_理论八_如何用迪米特法则（LOD）实现“高内聚、松耦合”_.md
  
   - 23_实战一（上）_针对业务系统的开发，如何做需求分析和设计_.md
  
   - 24_实战一（下）_如何实现一个遵从设计原则的积分兑换系统_.md
  
   - 25_实战二（上）_针对非业务的通用框架开发，如何做需求分析和设计_.md
  
   - 26_实战二（下）_如何实现一个支持各种统计规则的性能计数器_.md
  
   - 27_理论一_什么情况下要重构_到底重构什么_又该如何重构_.md
  
   - 28_理论二_为了保证重构不出错，有哪些非常能落地的技术手段_.md
  
   - 29_理论三_什么是代码的可测试性_如何写出可测试性好的代码_.md
  
   - 30_理论四_如何通过封装、抽象、模块化、中间层等解耦代码_.md
  
   - 31_理论五_让你最快速地改善代码质量的20条编程规范（上）.md
  
   - 32_理论五_让你最快速地改善代码质量的20条编程规范（中）.md
  
   - 33_理论五_让你最快速地改善代码质量的20条编程规范（下）.md
  
   - 34_实战一（上）_通过一段ID生成器代码，学习如何发现代码质量问题.md
  
   - 35_实战一（下）_手把手带你将ID生成器代码从“能用”重构为“好用”.md
  
   - 36_实战二（上）_程序出错该返回啥_NULL、异常、错误码、空对象_.md
  
   - 37_实战二（下）_重构ID生成器项目中各函数的异常处理代码.md
  
   - 38_总结回顾面向对象、设计原则、编程规范、重构技巧等知识点.md
  
   - 39_运用学过的设计原则和思想完善之前讲的性能计数器项目（上）.md
  
   - 40_运用学过的设计原则和思想完善之前讲的性能计数器项目（下）.md
  
   - 41_单例模式（上）_为什么说支持懒加载的双重检测不比饿汉式更优_.md
  
   - 42_单例模式（中）_我为什么不推荐使用单例模式_又有何替代方案_.md
  
   - 43_单例模式（下）_如何设计实现一个集群环境下的分布式单例模式_.md
  
   - 44_工厂模式（上）_我为什么说没事不要随便用工厂模式创建对象_.md
  
   - 45_工厂模式（下）_如何设计实现一个DependencyInjection框架_.md
  
   - 46_建造者模式_详解构造函数、set方法、建造者模式三种对象创建方式.md
  
   - 47_原型模式_如何最快速地clone一个HashMap散列表_.md
  
   - 48_代理模式_代理在RPC、缓存、监控等场景中的应用.md
  
   - 49_桥接模式_如何实现支持不同类型和渠道的消息推送系统_.md
  
   - 50_装饰器模式_通过剖析JavaIO类库源码学习装饰器模式.md
  
   - 51_适配器模式_代理、适配器、桥接、装饰，这四个模式有何区别_.md
  
   - 52_门面模式_如何设计合理的接口粒度以兼顾接口的易用性和通用性_.md
  
   - 53_组合模式_如何设计实现支持递归遍历的文件系统目录树结构_.md
  
   - 54_享元模式（上）_如何利用享元模式优化文本编辑器的内存占用_.md
  
   - 55_享元模式（下）_剖析享元模式在JavaInteger、String中的应用.md
  
   - 56_观察者模式（上）_详解各种应用场景下观察者模式的不同实现方式.md
  
   - 57_观察者模式（下）_如何实现一个异步非阻塞的EventBus框架_.md
  
   - 58_模板模式（上）_剖析模板模式在JDK、Servlet、JUnit等中的应用.md
  
   - 59_模板模式（下）_模板模式与Callback回调函数有何区别和联系_.md
  
   - 60_策略模式（上）_如何避免冗长的if-else_switch分支判断代码_.md
  
   - 61_策略模式（下）_如何实现一个支持给不同大小文件排序的小程序_.md
  
   - 62_职责链模式（上）_如何实现可灵活扩展算法的敏感信息过滤框架_.md
  
   - 63_职责链模式（下）_框架中常用的过滤器、拦截器是如何实现的_.md
  
   - 64_状态模式_游戏、工作流引擎中常用的状态机是如何实现的_.md
  
   - 65_迭代器模式（上）_相比直接遍历集合数据，使用迭代器有哪些优势_.md
  
   - 66_迭代器模式（中）_遍历集合的同时，为什么不能增删集合元素_.md
  
   - 67_迭代器模式（下）_如何设计实现一个支持“快照”功能的iterator_.md
  
   - 68_访问者模式（上）_手把手带你还原访问者模式诞生的思维过程.md
  
   - 69_访问者模式（下）_为什么支持双分派的语言不需要访问者模式_.md
  
   - 70_备忘录模式_对于大对象的备份和恢复，如何优化内存和时间的消耗_.md
  
   - 71_命令模式_如何利用命令模式实现一个手游后端架构_.md
  
   - 72_解释器模式_如何设计实现一个自定义接口告警规则功能_.md
  
   - 73_中介模式_什么时候用中介模式_什么时候用观察者模式_.md
  
   - 74_总结回顾23种经典设计模式的原理、背后的思想、应用场景等.md
  
   - 75_在实际的项目开发中，如何避免过度设计_又如何避免设计不足_.md
  
   - 76_开源实战一（上）_通过剖析JavaJDK源码学习灵活应用设计模式.md
  
   - 77_开源实战一（下）_通过剖析JavaJDK源码学习灵活应用设计模式.md
  
   - 78_开源实战二（上）_从Unix开源开发学习应对大型复杂项目开发.md
  
   - 79_开源实战二（中）_从Unix开源开发学习应对大型复杂项目开发.md
  
   - 80_开源实战二（下）_从Unix开源开发学习应对大型复杂项目开发.md
  
   - 81_开源实战三（上）_借GoogleGuava学习发现和开发通用功能模块.md
  
   - 82_开源实战三（中）_剖析GoogleGuava中用到的几种设计模式.md
  
   - 83_开源实战三（下）_借GoogleGuava学习三大编程范式中的函数式编程.md
  
   - 84_开源实战四（上）_剖析Spring框架中蕴含的经典设计思想或原则.md
  
   - 85_开源实战四（中）_剖析Spring框架中用来支持扩展的两种设计模式.md
  
   - 86_开源实战四（下）_总结Spring框架用到的11种设计模式.md
  
   - 87_开源实战五（上）_MyBatis如何权衡易用性、性能和灵活性_.md
  
   - 88_开源实战五（中）_如何利用职责链与代理模式实现MyBatisPlugin_.md
  
   - 89_开源实战五（下）_总结MyBatis框架中用到的10种设计模式.md
  
   - 90_项目实战一_设计实现一个支持各种算法的限流框架（分析）.md
  
   - 91_项目实战一_设计实现一个支持各种算法的限流框架（设计）.md
  
   - 92_项目实战一_设计实现一个支持各种算法的限流框架（实现）.md
  
   - 93_项目实战二_设计实现一个通用的接口幂等框架（分析）.md
  
   - 94_项目实战二_设计实现一个通用的接口幂等框架（设计）.md
  
   - 95_项目实战二_设计实现一个通用的接口幂等框架（实现）.md
  
   - 96_项目实战三_设计实现一个支持自定义规则的灰度发布组件（分析）.md
  
   - 97_项目实战三_设计实现一个支持自定义规则的灰度发布组件（设计）.md
  
   - 98_项目实战三_设计实现一个支持自定义规则的灰度发布组件（实现）.md
  
   - 99_总结回顾_在实际软件开发中常用的设计思想、原则和模式.md
  
   - 100_如何将设计思想、原则、模式等理论知识应用到项目中_.md
  
   - 加餐一_用一篇文章带你了解专栏中用到的所有Java语法.md
  
   - 加餐二_设计模式、重构、编程规范等相关书籍推荐.md
  
   - 春节特别加餐_王争_如何学习《设计模式之美》专栏_.md
  
   - 加餐三_聊一聊Google是如何做CodeReview的.md
  
   - 加餐四_聊一聊Google那些让我快速成长的地方.md
  
   - 加餐五_听一听小争哥对Google工程师文化的解读.md
  
   - 加餐六_什么才是所谓的编程能力_如何考察一个人的编程能力_.md
  
   - 加餐七_基础学科的知识如何转化成实际的技术生产力_.md
  
   - 加餐八_程序员怎么才能让自己走得更高、更远_.md
  
   - 加餐九_作为面试官或候选人，如何面试或回答设计模式问题_.md
  
   - 加餐十_如何接手一坨烂业务代码_如何在烂业务代码中成长_.md
  
   - 结束语_聊一聊机遇、方向、能力、努力！.md
  